@page "/"
@using Auth0_Blazor.Models
@using Auth0_Blazor.Services
@using Auth0_Blazor.Icons
@inject PlantService PlantService
@inject NavigationManager NavigationManager
@inject ILogger<Home> Logger
@inject UserPlantService UserPlantService
@inject UserService UserService
@inject UtilityService UtilityService

<PageTitle>Home</PageTitle>

<div class="grid-layout-cards">
    @foreach(var plant in Plants) {
        <div class="card-wrapper">
            <MudCard Class="m-2 rounded-3 d-flex plantcard">
                <div class="image-container-relative">
                    <MudCardMedia Image="@plant.ImageUrl" Height="250" Class="object-fit-cover"/>
                    <AuthorizeView>
                        <Authorized>
                            <MudButton Class="button-bottom-right"
                                       OnClick="@(() => AddPlantToHouseHold(@plant.Id))">
                                <AddSymbol/>
                            </MudButton>
                        </Authorized>
                    </AuthorizeView>
                </div>
                <MudCardContent Class="d-flex flex-column align-items-center justify-content-center gap-3">
                    <MudText Typo="Typo.h5" Color="Color.Primary">
                        @plant.Name
                    </MudText>
                    <MudText Typo="Typo.body2" Color="Color.Dark">
                        @Truncate(plant.Description, 70)
                    </MudText>
                </MudCardContent>
                <MudCardActions Class="d-flex align-items-center justify-content-center">
                    <MudButton Variant="Variant.Text" Class="mb-3 green-text"
                               OnClick="@(() => NavigateToPlantById(@plant.Id))">Learn more</MudButton>
                </MudCardActions>
            </MudCard>
        </div>
    }
</div>

@code {
    public required List<Plant> Plants;

    protected override async Task OnInitializedAsync()
    {
        Plants = await PlantService.GetAllPlantsAsync();
    }
        
    private static string Truncate(string text, int maxLength)
    {
        return UtilityService.TruncateText(text, maxLength);
    }
        
    private void NavigateToPlantById(int id)
    {
        NavigationManager.NavigateTo($"/plants/{id}");
    }
    
    private async Task AddPlantToHouseHold(int plantId)
    {
        await UserPlantService.AddPlantToUserHouseholdAsync(plantId);
    }
}