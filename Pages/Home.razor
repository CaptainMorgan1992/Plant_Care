@page "/"
@using Auth0_Blazor.Models
@using Auth0_Blazor.Services
@using Auth0_Blazor.Icons
@using Auth0_Blazor.Records
@inject PlantService PlantService
@inject NavigationManager NavigationManager
@inject ILogger<Home> Logger
@inject UserPlantService UserPlantService
@inject UserService UserService
@inject UtilityService UtilityService
@inject AuthenticationStateProvider AuthStateProvider
@inject UserStateService UserStateService

<PageTitle>Home</PageTitle>

<div class="grid-layout-cards">
    @foreach (var userPlant in TopUserPlants)
    {
        var plant = userPlant.Plant;
        if (plant == null) continue;
        <div class="card-wrapper">
            <MudCard Class="m-2 rounded-3 d-flex plantcard">
                <div class="image-container-relative">
                    <MudCardMedia Image="@plant.ImageUrl" Height="250" Class="object-fit-cover"/>
                    <AuthorizeView>
                        <Authorized>
                            @if (_ownerExists && _userPlantIds.Contains(plant.Id))
                            {
                                <MudButton Class="button-bottom-right"
                                           OnClick="@(() => RemovePlantFromHousehold(plant.Id))">
                                    <DeleteSymbol/>
                                </MudButton>
                            }
                            else
                            {
                                <MudButton Class="button-bottom-right"
                                           OnClick="@(() => AddPlantToHouseHold(plant.Id))">
                                    <AddSymbol/>
                                </MudButton>
                            }

                        </Authorized>
                    </AuthorizeView>
                </div>
                <MudCardContent Class="d-flex flex-column align-items-center justify-content-center gap-3">
                    <MudText Typo="Typo.h5" Color="Color.Primary">
                        @plant.Name
                    </MudText>
                    <MudText Typo="Typo.body2" Color="Color.Dark">
                        @Truncate(plant.Description, 70)
                    </MudText>
                </MudCardContent>
                <MudCardActions Class="d-flex align-items-center justify-content-center">
                    <MudButton Variant="Variant.Text" Class="mb-3 green-text"
                               OnClick="@(() => NavigateToPlantById(plant.Id))">Learn more</MudButton>
                </MudCardActions>
            </MudCard>
        </div>
    }
</div>

@code {
    public required List<UserPlant> TopUserPlants;
    private HashSet<int> _userPlantIds = new();
    private bool _ownerExists = false;
    private List<UserPlant> _userPlants = new();

    protected override async Task OnInitializedAsync()
    {
        TopUserPlants = await UserPlantService.GetTop6UserPlantsAsync();
        var ownerId = await UserService.GetUserAuth0IdAsync();
        var userId = await UserService.GetUserIdByOwnerIdAsync(ownerId);

        UserStateService.SetOwnerId(ownerId);
        
        _ownerExists = userId.HasValue;

        if (_ownerExists)
        {
            await UpdateUserPlantsStateAsync();
        }
        else
        {
            _userPlantIds.Clear();
        }
    }
    
    private static HashSet<int> UserPlantsToHashSet(List<UserPlant> userPlants)
    {
        return userPlants.Select(up => up.PlantId).ToHashSet();
    }
        
    private static string Truncate(string text, int maxLength)
    {
        return UtilityService.TruncateText(text, maxLength);
    }
        
    private void NavigateToPlantById(int id)
    {
        NavigationManager.NavigateTo($"/plants/{id}");
    }
    
    private async Task AddPlantToHouseHold(int plantId)
    {
        await UserPlantService.AddPlantToUserHouseholdAsync(plantId);
        await UpdateUserPlantsStateAsync();
    }
    
    private async Task RemovePlantFromHousehold(int plantId)
    {
        await UserPlantService.RemovePlantFromUserHouseholdAsync(plantId);
        await UpdateUserPlantsStateAsync();
    }

    private async Task UpdateUserPlantsStateAsync()
    {
        _userPlants = await UserPlantService.GetUserPlantsAsync();
        _userPlantIds = UserPlantsToHashSet(_userPlants);
        await InvokeAsync(StateHasChanged);
    }
}