@page "/Profile"
@inject TokenProvider TokenProvider
@attribute [Authorize]

<PageTitle>Profile</PageTitle>

<div class="row">
    <div class="col-md-12">
        <div class="row">
            <h2>Profile</h2>

            <div class="col-md-2">
                <img src="@_picture"
                     alt="" class="img-rounded img-responsive" />
            </div>
            <div class="col-md-4">
                <h3>@_username</h3>
                <p>
                    <i class="bi bi-envelope"></i> @_emailAddress
                </p>
                <p>
                    <strong>Id Token</strong>: @_idToken
                </p>
            </div>
        </div>
    </div>
</div>

@code {

    [CascadingParameter]
    public required Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private string _username = "";
    private string _emailAddress = "";
    private string _picture = "";
    private string _idToken = "";

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateTask;

        _username = state.User.Identity?.Name ?? string.Empty;
        _emailAddress = state.User.Claims
            .Where(c => c.Type.Equals(System.Security.Claims.ClaimTypes.Email))
            .Select(c => c.Value)
            .FirstOrDefault() ?? string.Empty;

        _picture = state.User.Claims
            .Where(c => c.Type.Equals("picture"))
            .Select(c => c.Value)
            .FirstOrDefault() ?? string.Empty;


        _idToken = TokenProvider.IdToken ?? string.Empty;

        await base.OnInitializedAsync();
    }
}

