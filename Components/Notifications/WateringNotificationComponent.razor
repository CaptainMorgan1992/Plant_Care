@using Auth0_Blazor.Icons
@using Auth0_Blazor.Services.IService
@inject INotificationService NotificationService
@inject ILogger<WateringNotificationComponent> Logger
@inject IUserStateService UserStateService
@namespace Components.Notifications


@foreach (var name in _plantNames.Select((n, i) => new { Name = n, Index = i }))
{
    <div class="fixed-toast" style="top:@(16 + name.Index * 95)px">
        <div class="position-relative">
            Time to water @name.Name
            <DropletSymbol/>
            <div class="corner-closeSymbol" @onclick="() => CloseNotification(name.Index)">
                <CloseSymbol/>
            </div>
        </div>
    </div>
}

@code {
    private string? CurrentOwnerId => UserStateService.OwnerId;
    private readonly List<string> _plantNames = [];
    
    
    protected override void OnInitialized()
    {
        NotificationService.OnWateringNotify += Show;
    }
    
    private async void Show(string plantName, string ownerId)
    {
        if(ownerId != CurrentOwnerId)
        {
            return;
        }
        await InvokeAsync(() => {
            _plantNames.Add(plantName);
            InvokeAsync(StateHasChanged);
        });
        // Hides notification after 10 seconds.
        await Task.Delay(10000); 
        await InvokeAsync(() => {
            _plantNames.Remove(plantName);
            StateHasChanged();
        });
    }
    
    public void Dispose()
    {
        NotificationService.OnWateringNotify -= Show;
    }
    
    private void CloseNotification(int index)
    {
            _plantNames.RemoveAt(index);
            StateHasChanged();
    }
}