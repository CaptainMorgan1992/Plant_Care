@using Auth0_Blazor.Services
@using Auth0_Blazor.Icons
@inject NotificationService NotificationService
@inject ILogger<WateringNotificationComponent> Logger
@namespace Components.Notifications


@foreach (var name in _plantNames.Select((n, i) => new { Name = n, Index = i }))
{
    <div class="fixed-toast" style="top:@(16 + name.Index * 110)px">
        Time to water @name.Name 
        <DropletSymbol/>
    </div>
}

@code {
    private readonly List<string> _plantNames = [];
    
    protected override void OnInitialized()
    {
        NotificationService.OnWateringNotify += Show;
    }
    
    private async void Show(string plantName)
    {
        await InvokeAsync(() => {
            _plantNames.Add(plantName);
            InvokeAsync(StateHasChanged);
        });
        // Optionally hide after x seconds
        await Task.Delay(10000); 
        await InvokeAsync(() => {
            _plantNames.Remove(plantName);
            StateHasChanged();
        });
    }
    
    public void Dispose()
    {
        NotificationService.OnWateringNotify -= Show;
    }
}