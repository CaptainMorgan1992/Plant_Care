@using Auth0_Blazor.Services
@using Auth0_Blazor.Services.IService
@using MudBlazor
@inject NavigationManager NavigationManager
@inject ILogger<NavigationDrawer> Logger
@inject UtilityService UtilityService
@inject IUserService UserService
@inject AuthenticationStateProvider AuthStateProvider
@namespace Components

<MudNavMenu Rounded="true" Margin="Margin.Normal" Color="Color.Secondary" Class="pa-2">
    <MudNavLink Match="NavLinkMatch.All" Href="" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <AuthorizeView>
        <Authorized>
            <MudNavLink Icon="@Icons.Material.Filled.Person" Class="nav-item px-3">
                @Truncate(context.User.Identity?.Name ?? "Unknown User", 16)
            </MudNavLink>
            <MudNavLink Class="nav-item px-3">
                <MudButton Href="/logout" Variant="Variant.Text" Color="Color.Primary" Class="nav-link">
                    <MudIcon Icon="@Icons.Material.Filled.Logout" /> Logout
                </MudButton>
            </MudNavLink>
        </Authorized>
        <NotAuthorized>
            <MudNavLink Href="/login?redirectUri=/" Icon="@Icons.Material.Filled.Login" Class="nav-item px-3">
                Login
            </MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
  
    <MudNavLink Match="NavLinkMatch.All" Href="/search" Icon="@Icons.Material.Filled.Search">
        Search
    </MudNavLink>
    <AuthorizeView>
        <Authorized>
            <MudNavLink Match="NavLinkMatch.All" Href="/savedPlants" Icon="@Icons.Material.Filled.Spa">
                Saved plants
            </MudNavLink>
            @if (_isUserAdmin)
            {
                <MudNavLink Match="NavLinkMatch.All" Href="/addNewPlant" Icon="@Icons.Material.Filled.Add">
                    Add new plant 
                </MudNavLink>
            }
        </Authorized>
    </AuthorizeView>
    
</MudNavMenu>


@code {
    private bool _isUserAdmin;
    
    
    protected override async Task OnInitializedAsync()
    {
        var ownerId = await UserService.GetUserAuth0IdAsync();

        if (!string.IsNullOrWhiteSpace(ownerId))
        {
            _isUserAdmin = await UserService.IsUserAdminAsync(ownerId);
        }
    }
    
    private string? Truncate(string text, int maxLength)
    {
        return UtilityService.TruncateText(text, maxLength);
    }

}