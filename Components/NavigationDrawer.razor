@using MudBlazor
@inject NavigationManager NavigationManager
@inject ILogger<NavigationDrawer> Logger

<MudNavMenu Rounded="true" Margin="Margin.Normal" Color="Color.Tertiary" Class="pa-2">
    <MudNavLink Match="NavLinkMatch.All" Href="" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavLink Match="NavLinkMatch.Prefix" Href="counter" Icon="@Icons.Material.Filled.Numbers">Counter</MudNavLink>
    <MudNavLink Href="profile" Icon="@Icons.Material.Filled.Person">Profile</MudNavLink>
    
    <AuthorizeView>
        <Authorized>
            <MudNavLink Href="Account/Manage" Icon="@Icons.Material.Filled.Person" Class="nav-item px-3">
                @context.User.Identity?.Name
            </MudNavLink>
            <MudNavLink Class="nav-item px-3">
                <form action="Account/Logout" method="post" style="display:inline;">
                    <AntiforgeryToken/>
                    <input type="hidden" name="ReturnUrl" value="@currentUrl"/>
                    <MudButton Type="Submit" Variant="Variant.Text" Color="Color.Primary" Class="nav-link">
                        <MudIcon Icon="@Icons.Material.Filled.Logout" /> Logout
                    </MudButton>
                </form>
            </MudNavLink>
        </Authorized>
        <NotAuthorized>
            <MudNavLink Href="Account/Register" Icon="@Icons.Material.Filled.PersonAdd" Class="nav-item px-3">
                Register
            </MudNavLink>
            <MudNavLink Href="Account/Login" Icon="@Icons.Material.Filled.Login" Class="nav-item px-3">
                Login
            </MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
</MudNavMenu>


@code {
    
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}